package com.example.informsafetydatabase;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;

import androidx.annotation.Nullable;

import java.util.ArrayList;
import java.util.List;

public class DatabaseHelper extends SQLiteOpenHelper {

    public DatabaseHelper(@Nullable Context context) {
        super(context, "user.db", null, 1);
    }

    // first time DB accessed
    @Override
    public void onCreate(SQLiteDatabase db) {

        // Create empty tables
        // x is a placeholder to allow inserting rows with no values

        String createTeacherTable = "CREATE TABLE IF NOT EXISTS Teacher (" +
                "id INTEGER PRIMARY KEY AUTOINCREMENT," +
                "x INT" +
                ")";

        String createGuardianTable = "CREATE TABLE IF NOT EXISTS Guardian (" +
                "id INTEGER PRIMARY KEY AUTOINCREMENT," +
                "x INT" +
                ")";

        String createUserTable = "CREATE TABLE IF NOT EXISTS User (" +
                "id INTEGER PRIMARY KEY AUTOINCREMENT, " +
                "teacher_id INTEGER REFERENCES Teacher (id), " +
                "guardian_id INTEGER REFERENCES Guardian (id), " +
                "is_teacher INT, " +
                "name TEXT, " +
                "email TEXT UNIQUE, " +
                "phone TEXT," +
                "password TEXT" +
                ")";

        db.execSQL(createTeacherTable);
        db.execSQL(createGuardianTable);
        db.execSQL(createUserTable);
    }

    // When DB version changed
    @Override
    public void onUpgrade(SQLiteDatabase sqLiteDatabase, int oldVersion, int newVersion) {
    }


    // Insert user based on Registration form
    public long insertUser(RegistrationForm registrationForm) {

        SQLiteDatabase db = this.getWritableDatabase();
        ContentValues cv = new ContentValues();

        cv.put("teacher_id", registrationForm.getTeacherID());
        cv.put("guardian_id", registrationForm.getGuardianID());

        // Convert is_teacher from bool to int for SQLite
        cv.put("is_teacher", registrationForm.isTeacher() ? 1 : 0);

        cv.put("name", registrationForm.getName());
        cv.put("email", registrationForm.getEmail());
        cv.put("phone", registrationForm.getPhone());
        cv.put("password", registrationForm.getPassword());
        long userID = db.insert("User", null, cv);

        // Return autogenerated User ID for reference
        return userID;
    }

    // Insert teacher based on Registration form
    public long insertTeacher(RegistrationForm registrationForm) {

        SQLiteDatabase db = this.getWritableDatabase();
        ContentValues cv = new ContentValues();

        long teacher_ID = db.insert("Teacher", "x", cv);

        // Return autogenerated Teacher ID for reference
        return teacher_ID;
    }

    // Insert guardian based on Registration form
    public long insertGuardian(RegistrationForm registrationForm) {

        SQLiteDatabase db = this.getWritableDatabase();
        ContentValues cv = new ContentValues();

        long guardian_ID = db.insert("Guardian", "x", cv);

        // Return autogenerated Guardian ID for reference
        return guardian_ID;
    }


    // Delete user based on User Model of logged in user
    public void deleteUser(UserModel userModel) {

        SQLiteDatabase db = this.getWritableDatabase();
        db.execSQL("DELETE FROM User WHERE id = " + userModel.getUserID());

    }

    // Delete teacher based on User Model of logged in user
    public void deleteTeacher(UserModel userModel) {

        SQLiteDatabase db = this.getWritableDatabase();
        db.execSQL("DELETE FROM Teacher WHERE id = " + userModel.getTeacherID());

    }

    // Delete guardian based on User Model of logged in user
    public void deleteGuardian(UserModel userModel) {

        SQLiteDatabase db = this.getWritableDatabase();
        db.execSQL("DELETE FROM Guardian WHERE id = " + userModel.getGuardianID());

    }


    // Select user password based on email
    public String selectPassword(String inputEmail) {

        SQLiteDatabase db = this.getReadableDatabase();
        String queryString = "SELECT password from User where email = '" + inputEmail + "'";
        String correctPassword = "";

        Cursor cursor = db.rawQuery(queryString, null);

        if(cursor.moveToFirst()) {
            // Loop through result set, create new User objects, put into return list
            do {
                correctPassword = cursor.getString(0);
            }
            while (cursor.moveToNext());
        }

        // clean up
        cursor.close();
        db.close();

        return correctPassword;
    }




    // Get all info for a user based on email
    public UserModel selectUser(String inputEmail) {

        UserModel userModel = new UserModel();

        SQLiteDatabase db = this.getReadableDatabase();
        String queryString = "SELECT id, teacher_id, guardian_id, is_teacher, name, email, phone, password from User where email = '" + inputEmail + "'";

        Cursor cursor = db.rawQuery(queryString, null);

        if(cursor.moveToFirst()) {
            // Loop through result set, create new User objects, put into return list
            do {
                int userID = cursor.getInt(0);
                int teacherID = cursor.getInt(1);
                int guardianID = cursor.getInt(2);

                // Convert is_teacher from int to bool
                boolean isTeacher = cursor.getInt(3) != 0;

                String name = cursor.getString(4);
                String email = cursor.getString(5);
                String phone = cursor.getString(6);
                String password = cursor.getString(7);

                userModel = new UserModel(userID, teacherID, guardianID, isTeacher, name, email, phone, password);

            }
            while(cursor.moveToNext());

        }
        else {
            // do nothing
        }

        // clean up
        cursor.close();
        db.close();

        return userModel;
    }

}
