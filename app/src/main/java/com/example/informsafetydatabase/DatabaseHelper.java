package com.example.informsafetydatabase;

import static com.example.informsafetydatabase.EncryptDecrypt.*;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;

import androidx.annotation.Nullable;

import java.util.ArrayList;
import java.util.List;

public class DatabaseHelper extends SQLiteOpenHelper {

    public DatabaseHelper(@Nullable Context context) {
        super(context, "user.db", null, 1);
    }

    // first time DB accessed
    @Override
    public void onCreate(SQLiteDatabase db) {

        // Create empty tables
        // x is a placeholder to allow inserting rows with no values

        String createTeacherTable = "CREATE TABLE IF NOT EXISTS Teacher (" +
                "id INTEGER PRIMARY KEY AUTOINCREMENT," +
                "x INT" +
                ")";

        String createGuardianTable = "CREATE TABLE IF NOT EXISTS Guardian (" +
                "id INTEGER PRIMARY KEY AUTOINCREMENT," +
                "x INT" +
                ")";

        String createUserTable = "CREATE TABLE IF NOT EXISTS User (" +
                "id INTEGER PRIMARY KEY AUTOINCREMENT, " +
                "teacher_id INTEGER REFERENCES Teacher (id), " +
                "guardian_id INTEGER REFERENCES Guardian (id), " +
                "is_teacher INT, " +
                "name TEXT, " +
                "email TEXT UNIQUE, " +
                "phone TEXT," +
                "password TEXT" +
                ")";

        db.execSQL(createTeacherTable);
        db.execSQL(createGuardianTable);
        db.execSQL(createUserTable);
    }

    // When DB version changed
    @Override
    public void onUpgrade(SQLiteDatabase sqLiteDatabase, int oldVersion, int newVersion) {
    }


    // Insert user based on Registration form
    public long insertUser(RegistrationForm registrationForm) {

        SQLiteDatabase db = this.getWritableDatabase();
        ContentValues cv = new ContentValues();

        cv.put("teacher_id", registrationForm.getTeacherID());
        cv.put("guardian_id", registrationForm.getGuardianID());
        cv.put("is_teacher", registrationForm.isTeacher());
        cv.put("name", encrypt(registrationForm.getName()));
        cv.put("email", encrypt(registrationForm.getEmail()));
        cv.put("phone", encrypt(registrationForm.getPhone()));
        cv.put("password", encrypt(registrationForm.getPassword()));
        long userID = db.insert("User", null, cv);

        // Return autogenerated User ID for reference
        return userID;
    }

    // Insert teacher based on Registration form
    public long insertTeacher(RegistrationForm registrationForm) {

        SQLiteDatabase db = this.getWritableDatabase();
        ContentValues cv = new ContentValues();

        long teacher_ID = db.insert("Teacher", "x", cv);

        // Return autogenerated Teacher ID for reference
        return teacher_ID;
    }

    // Insert guardian based on Registration form
    public long insertGuardian(RegistrationForm registrationForm) {

        SQLiteDatabase db = this.getWritableDatabase();
        ContentValues cv = new ContentValues();

        long guardian_ID = db.insert("Guardian", "x", cv);

        // Return autogenerated Guardian ID for reference
        return guardian_ID;
    }


    // Delete user based on User Model of logged in user
    public void deleteUser(UserModel userModel) {

        SQLiteDatabase db = this.getWritableDatabase();
        db.execSQL("DELETE FROM User WHERE id = " + userModel.getUserID());

    }

    // Delete teacher based on User Model of logged in user
    public void deleteTeacher(UserModel userModel) {

        SQLiteDatabase db = this.getWritableDatabase();
        db.execSQL("DELETE FROM Teacher WHERE id = " + userModel.getTeacherID());

    }

    // Delete guardian based on User Model of logged in user
    public void deleteGuardian(UserModel userModel) {

        SQLiteDatabase db = this.getWritableDatabase();
        db.execSQL("DELETE FROM Guardian WHERE id = " + userModel.getGuardianID());

    }


    // Get user ID from email
    public int getIDFromEmail(String inputEmail) {

        SQLiteDatabase db = this.getReadableDatabase();
        // Encrypt provided email to match with stored encrypted email
        String encryptedEmail = encrypt(inputEmail);
        String queryString = "SELECT id from User where email = '" + encryptedEmail + "'";
        int id = 0;

        Cursor cursor = db.rawQuery(queryString, null);

        if(cursor.moveToFirst()) {
            // Loop through result set, create new User objects, put into return list
            do {
                id = cursor.getInt(0);
            }
            while (cursor.moveToNext());
        }

        // clean up
        cursor.close();
        db.close();

        return id;
    }


    // Select user password based on user ID
    public String selectPassword(int id) {

        SQLiteDatabase db = this.getReadableDatabase();
        String queryString = "SELECT password from User where id = " + id;
        String correctPassword = "";

        Cursor cursor = db.rawQuery(queryString, null);

        if(cursor.moveToFirst()) {
            // Get and decrypt password from return dataset
            do {
                correctPassword = decrypt(cursor.getString(0));
            }
            while (cursor.moveToNext());
        }

        // clean up
        cursor.close();
        db.close();

        return correctPassword;
    }


    // Update password based on user email
    public void updatePassword(String email, String newPassword) {

        // Encrypt details
        newPassword = encrypt(newPassword);

        // Insert into User table
        SQLiteDatabase db = this.getWritableDatabase();
        String queryString = "UPDATE User SET password = '" + newPassword + "' where email = '" + email + "'";
        db.execSQL(queryString);

    }


    // Update Name, Email, Phone based on ID
    public void updateUserDetails(int id, String newName, String newEmail, String newPhone) {

        // Encrypt details
        newName = encrypt(newName);
        newEmail = encrypt(newEmail);
        newPhone = encrypt(newPhone);

        // Insert into User table
        SQLiteDatabase db = this.getWritableDatabase();
        String queryString = "UPDATE User SET name = '" + newName +
                                          "', email = '" + newEmail +
                                          "', phone = '" + newPhone +
                                       "' where id = " + id;
        db.execSQL(queryString);

    }



    // Get all info for a user based on user ID
    public UserModel selectUser(int id) {

        UserModel userModel = new UserModel();

        SQLiteDatabase db = this.getReadableDatabase();
        String queryString = "SELECT id, teacher_id, guardian_id, is_teacher, name, email, phone, password from User where id = " + id;

        Cursor cursor = db.rawQuery(queryString, null);

        if(cursor.moveToFirst()) {
            // Loop through result set, create new User objects, put into return list
            do {
                int userID = cursor.getInt(0);
                int teacherID = cursor.getInt(1);
                int guardianID = cursor.getInt(2);

                // Convert is_teacher from int to bool
                boolean isTeacher = cursor.getInt(3) != 0;

                // Decrypt personal info
                String name = decrypt(cursor.getString(4));
                String email = decrypt(cursor.getString(5));
                String phone = decrypt(cursor.getString(6));
                String password = decrypt(cursor.getString(7));

                userModel = new UserModel(userID, teacherID, guardianID, isTeacher, name, email, phone, password);

            }
            while(cursor.moveToNext());

        }
        else {
            // do nothing
        }

        // clean up
        cursor.close();
        db.close();

        return userModel;
    }


    // Delete all records from teacher/guardian/user
    // FOR TESTING ONLY!
    public void deleteUsers() {
        SQLiteDatabase db = this.getWritableDatabase();
        db.execSQL("DELETE FROM Teacher");
        db.execSQL("DELETE FROM Guardian");
        db.execSQL("DELETE FROM User");
    }

}
