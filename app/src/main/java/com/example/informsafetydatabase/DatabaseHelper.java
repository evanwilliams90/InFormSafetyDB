package com.example.informsafetydatabase;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;

import androidx.annotation.Nullable;

public class DatabaseHelper extends SQLiteOpenHelper {

    public DatabaseHelper(@Nullable Context context) {
        super(context, "user.db", null, 1);
    }

    // first time DB accessed
    @Override
    public void onCreate(SQLiteDatabase db) {

        String createTeacherTable = "CREATE TABLE IF NOT EXISTS Teacher (" +
                "id INTEGER PRIMARY KEY AUTOINCREMENT, " +
                "name TEXT, " +
                "email TEXT, " +
                "phone TEXT" +
                ")";

        String createGuardianTable = "CREATE TABLE IF NOT EXISTS Guardian (" +
                "id INTEGER PRIMARY KEY AUTOINCREMENT, " +
                "name TEXT, " +
                "email TEXT, " +
                "phone TEXT" +
                ")";

        String createUserTable = "CREATE TABLE IF NOT EXISTS User (" +
                "id INTEGER PRIMARY KEY AUTOINCREMENT, " +
                "kindergarten_id INTEGER REFERENCES Kindergarten (id), " +
                "teacher_id INTEGER REFERENCES Teacher (id), " +
                "guardian_id INTEGER REFERENCES Guardian (id), " +
                "username TEXT, " +
                "password TEXT" +
                ")";

        db.execSQL(createTeacherTable);
        db.execSQL(createGuardianTable);
        db.execSQL(createUserTable);
    }

    // when DB version changed
    @Override
    public void onUpgrade(SQLiteDatabase sqLiteDatabase, int oldVersion, int newVersion) {
    }

    // Insert user
    public boolean insertUser(UserModel userModel) {

        SQLiteDatabase db = this.getWritableDatabase();
        ContentValues cv = new ContentValues();

        cv.put("teacher_id", userModel.getTeacherID());
        cv.put("guardian_id", userModel.getGuardianID());
        cv.put("password", userModel.getPassword());
        long insert = db.insert("User", null, cv);

        // exit code 1 if successful, -1 otherwise
        return insert != -1;
    }


    // Insert teacher
    public long insertTeacher(UserModel userModel) {

        SQLiteDatabase db = this.getWritableDatabase();
        ContentValues cv = new ContentValues();

        cv.put("name", userModel.getName());
        cv.put("email", userModel.getEmail());
        cv.put("phone", userModel.getPhone());
        long insert = db.insert("Teacher", null, cv);

        // Return autogenerated Teacher ID for reference
        return insert;
    }


    // Insert guardian
    public long insertGuardian(UserModel userModel) {

        SQLiteDatabase db = this.getWritableDatabase();
        ContentValues cv = new ContentValues();

        cv.put("name", userModel.getName());
        cv.put("email", userModel.getEmail());
        cv.put("phone", userModel.getPhone());
        long insert = db.insert("Guardian", null, cv);

        // Return autogenerated Guardian ID for reference
        return insert;
    }



    // Delete a user
    public void deleteUser(UserModel userModel) {

        SQLiteDatabase db = this.getWritableDatabase();
        db.execSQL("DELETE FROM User WHERE id = " + userModel.getUserID());

    }



    // Delete a teacher
    public void deleteTeacher(UserModel userModel) {

        SQLiteDatabase db = this.getWritableDatabase();
        db.execSQL("DELETE FROM Teacher WHERE id = " + userModel.getTeacherID());

    }


    // Delete a guardian
    public void deleteGuardian(UserModel userModel) {

        SQLiteDatabase db = this.getWritableDatabase();
        db.execSQL("DELETE FROM Guardian WHERE id = " + userModel.getGuardianID());

    }


//    // Get a list of all records
//    public List<UserModel> getUser() {
//
//        List<UserModel> returnList = new ArrayList<>();
//
//        // get data from database
//
//        String queryString = "SELECT * FROM User";
//
//        SQLiteDatabase db = this.getReadableDatabase();
//
//        Cursor cursor = db.rawQuery(queryString, null);
//
//        if(cursor.moveToFirst()) {
//            // Loop through result set, create new customer objects, put into return list
//            do {
//                int customerID = cursor.getInt(0);
//                String customerName = cursor.getString(1);
//                int customerAge = cursor.getInt(2);
//                boolean customerActive = cursor.getInt(3) == 1;
//
//                UserModel newCustomer = new UserModel(customerID, customerName, customerAge, customerActive);
//
//                returnList.add(newCustomer);
//
//            }
//            while(cursor.moveToNext());
//
//        }
//        else {
//            // do nothing
//        }
//
//        // clean up
//        cursor.close();
//        db.close();
//
//        return returnList;
//    }

}
